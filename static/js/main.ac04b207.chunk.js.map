{"version":3,"sources":["actions/actions.js","actions/types.js","components/List.js","components/Detail.js","App.js","reducers/index.js","store.js","index.js"],"names":["fetchPokemon","numPokemon","dispatch","pokeDetails","promises","i","push","fetch","then","response","json","pokemon","Promise","all","type","data","List","this","props","filterOptions","prevProps","query","id","value","onChange","event","updateQuery","target","options","Component","connect","state","Detail","pokemonId","match","params","pokemon_id","getPokemon","detail","src","sprites","front_default","alt","name","repeat","toString","length","types","map","height","weight","moves","move","abilities","ability","App","path","component","initialState","store","createStore","action","toLowerCase","filter","includes","to","width","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac04b207.chunk.js","sourcesContent":["// Copyright 2020, Rachel Phuong\r\n\r\nimport {UPDATE_QUERY, FETCH_POKEMON, FILTER_OPTIONS, GET_POKEMON} from './types';\r\n\r\n/*\r\n * Returns an object to update the query as the given query\r\n */\r\nexport const updateQuery = (query) => {\r\n  return {type: UPDATE_QUERY, data: query};\r\n};\r\n\r\n/*\r\n * Returns an object to cache the details of first numPokemon pokemon.\r\n * Fetches the detail data from the pokemon API\r\n */\r\nexport const fetchPokemon = (numPokemon) => dispatch => {\r\n  let pokeDetails = [];\r\n  let promises = [];\r\n  for (let i = 1; i <= numPokemon; i++) {\r\n    promises.push(fetch(\"https://pokeapi.co/api/v2/pokemon/\" + i)\r\n                   .then(response => response.json())\r\n                   .then(pokemon => pokeDetails[i - 1] = pokemon)\r\n    );\r\n  }\r\n  // When we have finished mutating pokeDetails, return it to cache in immutable state\r\n  Promise.all(promises).then(() => {dispatch({type: FETCH_POKEMON, data: pokeDetails})});\r\n};\r\n\r\n/*\r\n * Returns an object indicating to filter the pokemon options by the current query\r\n */\r\nexport const filterOptions = () => {\r\n  return {type: FILTER_OPTIONS};\r\n};\r\n\r\n/*\r\n * Returns an object to update the current pokemon details to that of the pokemon which\r\n * has the given id\r\n */\r\nexport const getPokemon = (id) => {\r\n  return {type: GET_POKEMON, data: id};\r\n};","// Copyright 2020, Rachel Phuong\r\n\r\nexport const UPDATE_QUERY = \"UPDATE_QUERY\";\r\nexport const FETCH_POKEMON = \"FETCH_POKEMON\";\r\nexport const FILTER_OPTIONS = \"FILTER_OPTIONS\";\r\nexport const GET_POKEMON = \"GET_POKEMON\";","// Copyright 2020, Rachel Phuong\r\n\r\nimport React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {updateQuery, fetchPokemon, filterOptions} from \"../actions/actions\";\r\n\r\n/*\r\n * List view for pokedex. Displays pokemon options with an filter bar at the top to\r\n * search by certain pokemon names\r\n */\r\nclass List extends Component {\r\n\r\n  /*\r\n   * If the pokemon list has already been cached, filter the preliminary options\r\n   */\r\n  componentDidMount() {\r\n    if (this.props.pokemon)\r\n      this.props.filterOptions();\r\n  }\r\n\r\n  /*\r\n   * Filter options again if there is a new pokemon list or query\r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.pokemon !== prevProps.pokemon || this.props.query !== prevProps.query)\r\n      this.props.filterOptions();\r\n  }\r\n\r\n  /*\r\n   * Renders this with a filter bar followed by all the pokemon options\r\n   */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input id=\"filter-bar\" type=\"text\" value={this.props.query}\r\n               onChange={(event) => {\r\n                 this.props.updateQuery(event.target.value);\r\n               }}\r\n        />\r\n        <ul id=\"poke-list\">\r\n          {this.props.options}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\n * Maps the redux state to this.props\r\n */\r\nconst mapStateToProps = state => ({\r\n  query: state.query,\r\n  pokemon: state.pokemon,\r\n  options: state.options\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateQuery, fetchPokemon, filterOptions})(List);","// Copyright 2020, Rachel Phuong\r\n\r\nimport React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getPokemon} from \"../actions/actions\";\r\n\r\n/*\r\n * The detail view of the pokedex. Includes the pokemon's image, name, id, type(s),\r\n * height, weight, move(s), and ability(s).\r\n */\r\nclass Detail extends Component {\r\n\r\n  /*\r\n   * Constructs a new Detail component\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.pokemonId = this.props.match.params.pokemon_id;\r\n  }\r\n\r\n  /*\r\n   * Initially get the pokemon detail for this pokemon id\r\n   */\r\n  componentDidMount() {\r\n    this.props.getPokemon(this.pokemonId);\r\n  }\r\n\r\n  /*\r\n   * If there is a new pokemon list, then re-get the pokemon detail for this pokemon id\r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.pokemon !== this.props.pokemon)\r\n      this.props.getPokemon(this.pokemonId);\r\n  }\r\n\r\n  /*\r\n   * Renders this with all the detail information\r\n   */\r\n  render()  {\r\n    if (!this.props.detail)\r\n      // There is no pokemon detail loaded\r\n      return null;\r\n    return (\r\n      <div>\r\n        {/*Keeps together the top information with gray background*/}\r\n        <div id=\"detail-top\">\r\n          <img src={this.props.detail.sprites.front_default} alt={this.props.detail.name}/>\r\n          <h1>{this.props.detail.name}</h1>\r\n          <p>\r\n            ID# {\"0\".repeat(3 - this.props.detail.id.toString().length)}\r\n            {this.props.detail.id}\r\n          </p>\r\n          <ul id=\"types\">\r\n            {this.props.detail.types.map(type => <li id=\"type\">{type.type.name}</li>)}\r\n          </ul>\r\n          <p>height: {this.props.detail.height}</p>\r\n          <p>weight: {this.props.detail.weight}</p>\r\n        </div>\r\n        {/*Keeps together the bottom information with white background*/}\r\n        <div id=\"detail-bot\">\r\n          <span id=\"moves\">\r\n            <h2>Moves</h2>\r\n            <ul id=\"moves\">\r\n              {this.props.detail.moves.map(move => <li>{move.move.name}</li>)}\r\n            </ul>\r\n          </span>\r\n          <span id=\"abilities\">\r\n            <h2>Abilities</h2>\r\n            <ul id=\"abilities\">\r\n              {this.props.detail.abilities.map(ability => <li>{ability.ability.name}</li>)}\r\n            </ul>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\n * Maps the redux state to this.props\r\n */\r\nconst mapStateToProps = state => ({\r\n  detail: state.detail,\r\n  pokemon: state.pokemon\r\n});\r\n\r\nexport default connect(mapStateToProps, {getPokemon})(Detail);","// Copyright 2020, Rachel Phuong\r\n\r\nimport React, {Component} from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport \"./App.css\"\r\nimport List from \"./components/List\";\r\nimport Detail from \"./components/Detail\";\r\nimport {fetchPokemon} from \"./actions/actions\";\r\n\r\n/*\r\n * The number of pokemon to display and cache for this app\r\n */\r\nconst NUM_POKEMON = 151;\r\n\r\n/*\r\n * A pokedex which has a list view to search pokemon and has detail view for each\r\n * pokemon included in the list view\r\n */\r\nclass App extends Component {\r\n\r\n  /*\r\n   * Sets up the initial pokemon list\r\n   */\r\n  componentDidMount() {\r\n    this.props.fetchPokemon(NUM_POKEMON);\r\n  }\r\n\r\n  /*\r\n   * Renders this with routes to either the list view or detail view\r\n   */\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/pokemon/:pokemon_id\" component={Detail}/>\r\n          <Route path=\"/\" component={List}/>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {fetchPokemon})(App);","// Copyright 2020, Rachel Phuong\r\n\r\nimport {UPDATE_QUERY, FETCH_POKEMON, FILTER_OPTIONS, GET_POKEMON} from '../actions/types';\r\nimport {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n/*\r\n * Initial state of the pokedex app.\r\n */\r\nconst initialState = {\r\n  query: \"\",  // query for the filter ba\r\n  pokemon: [],  // list of pokemon details as fetched from the pokemon api\r\n  options: [],  // list of pokemon options to display after filtering by the query\r\n  detail: {}  // detail of pokemon to display for the detail view\r\n};\r\n\r\n/*\r\n * root reducer to update the state of the pokedex app.\r\n */\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_QUERY:\r\n      // action.data is the new query to store\r\n      return {\r\n        ...state,\r\n        query: action.data\r\n      };\r\n    case FETCH_POKEMON:\r\n      // action.data is the fetched pokemon list\r\n      return {\r\n        ...state,\r\n        pokemon: action.data\r\n      };\r\n    case FILTER_OPTIONS:\r\n      // state.query will be used if defined; empty string otherwise\r\n      let query = state.query;\r\n      if (!query)\r\n        query = \"\";\r\n      query = query.toLowerCase();\r\n      return {\r\n        ...state,\r\n        options: state.pokemon\r\n                   .filter(pokemon => pokemon.name.toLowerCase().includes(query))\r\n                   .map(pokemon =>\r\n                     <li id=\"poke-item\">\r\n                       <Link to={\"/pokemon/\" + pokemon.id}>\r\n                         <img src={pokemon.sprites.front_default} alt={pokemon.name}\r\n                           width={125} height={125}/>\r\n                         <br/>{pokemon.name}<br/>\r\n                         {\"#\" + \"0\".repeat(3 - pokemon.id.toString().length)\r\n                          + pokemon.id.toString()}\r\n                       </Link>\r\n                     </li>)\r\n      };\r\n    case GET_POKEMON:\r\n      // action.data is the pokemon id of the pokemon detail to display\r\n      if (state.pokemon && state.pokemon.length >= action.data) {\r\n        // only update the state if the pokemon id was previously fetched and cached\r\n        return {\r\n          ...state,\r\n          detail: state.pokemon[action.data - 1]\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","// Copyright 2020, Rachel Phuong\r\n\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n\r\nexport default store;","// Copyright 2020, Rachel Phuong\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>,\r\n                document.getElementById('root'));\r\n"],"sourceRoot":""}